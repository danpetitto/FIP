from flask import Blueprint, render_template, request, redirect, url_for, flash, session
from flask_login import login_required, current_user
from models import Portfolio, db
from finance import (
    calculate_portfolio_value, calculate_realized_profit, 
    calculate_unrealized_profit, calculate_invested_amount, 
    calculate_dividend_cash, calculate_fees
)
import pandas as pd
from io import BytesIO
from datetime import datetime
from portfolio_analysis import get_delayed_price_polygon, get_sector_from_ticker
from investment_history import calculate_investment_history  # Ujisti se, že tato funkce existuje

def get_ticker_from_isin(isin):
    isin_mapping = {
        'US0378331005': 'AAPL',
        'US88160R1014': 'TSLA',
        'US02079K3059': 'GOOGL',
    }
    return isin_mapping.get(isin, None)


portfolio_bp = Blueprint('portfolio', __name__)

# Funkce pro výpočet výsledků portfolia
def calculate_portfolio_results(data):
    tickers_prices = {
        'ticker': {},
        'current_price': {},
        'sector': {}
    }

    stock_info_list = []
    unique_isins = data['ISIN'].unique()
    for isin in unique_isins:
        ticker = get_ticker_from_isin(isin)
        current_price = get_delayed_price_polygon(ticker)
        sector = get_sector_from_ticker(ticker)

        tickers_prices['ticker'][isin] = ticker
        tickers_prices['current_price'][isin] = current_price
        tickers_prices['sector'][isin] = sector

        total_shares = data.loc[data['ISIN'] == isin, 'Počet'].sum()
        purchase_price = data.loc[data['ISIN'] == isin, 'Cena'].mean()
        purchase_value = total_shares * purchase_price
        current_value = total_shares * current_price if current_price else 0
        profit = current_value - purchase_value

        if ticker and current_value > 0:
            stock_info_list.append({
                'ticker': ticker,
                'kupni_hodnota': round(purchase_value, 2),
                'aktualni_hodnota': round(current_value, 2),
                'profit': round(profit, 2)
            })

    portfolio_value = calculate_portfolio_value(data)
    invested_amount = calculate_invested_amount(data)
    investment_duration = calculate_investment_duration(data)

    if investment_duration > 0:
        avg_monthly_investment = invested_amount / investment_duration
    else:
        avg_monthly_investment = 0

    total_invested_positions = sum([info['kupni_hodnota'] for info in stock_info_list])
    if total_invested_positions > 0:
        position_percentages = [(info['kupni_hodnota'] / total_invested_positions) * 100 for info in stock_info_list]
        position_labels = [info['ticker'] for info in stock_info_list]
    else:
        position_percentages = []
        position_labels = []

    return tickers_prices, portfolio_value, invested_amount, investment_duration, avg_monthly_investment, stock_info_list, position_percentages, position_labels

# Výpočet doby investování (v měsících)
def calculate_investment_duration(data):
    data['Datum'] = pd.to_datetime(data['Datum'], dayfirst=True, errors='coerce')

    if data['Datum'].isnull().any():
        raise ValueError("Některá data ve sloupci 'Datum' nejsou validní.")

    oldest_date = data['Datum'].min()
    current_date = datetime.now()

    duration_in_months = (current_date.year - oldest_date.year) * 12 + current_date.month - oldest_date.month
    if current_date.day >= oldest_date.day:
        duration_in_months += 1

    return duration_in_months

# Route pro nahrávání nového portfolia
@portfolio_bp.route('/upload', methods=['GET', 'POST'])
@login_required
def upload():
    if request.method == 'POST':
        file = request.files.get('file')
        portfolio_name = request.form.get('portfolio_name')

        if not file or not portfolio_name:
            flash('Musíte nahrát soubor a zadat název portfolia.', 'error')
            return redirect(url_for('portfolio.upload'))

        if not file.filename.endswith('.csv'):
            flash('Prosím, nahrajte soubor ve formátu CSV.', 'error')
            return redirect(url_for('portfolio.upload'))

        new_portfolio = Portfolio(
            name=portfolio_name,
            filename=file.filename,
            data=file.read(),
            user=current_user
        )
        db.session.add(new_portfolio)
        db.session.commit()

        flash('Portfolio bylo úspěšně nahráno.', 'success')
        return redirect(url_for('portfolio.upload'))

    user_portfolios = Portfolio.query.filter_by(user_id=current_user.id).all()
    return render_template('upload.html', portfolios=user_portfolios)

# Route pro přidání nové transakce
@portfolio_bp.route('/add_transaction/<int:portfolio_id>', methods=['POST'])
@login_required
def add_transaction(portfolio_id):
    ticker = request.form.get('ticker')
    transaction_type = request.form.get('transaction_type')  # Nákup nebo prodej
    shares = request.form.get('shares')
    price = request.form.get('price')
    date = request.form.get('date')
    fees = request.form.get('fees')
    currency = request.form.get('currency')

    print(f"Ticker: {ticker}, Typ transakce: {transaction_type}, Počet akcií: {shares}, Cena: {price}, Datum: {date}, Poplatky: {fees}, Měna: {currency}")

    if not ticker or not shares or not date:
        flash('Musíte zadat Ticker, Počet akcií a Datum.', 'error')
        return redirect(url_for('portfolio.select_portfolio', portfolio_id=portfolio_id))

    try:
        shares = int(shares)
        price = float(price)
        fees = float(fees)
    except ValueError:
        flash('Počet akcií, cena a poplatky musí být čísla.', 'error')
        return redirect(url_for('portfolio.select_portfolio', portfolio_id=portfolio_id))

    manual_transactions = session.get('manual_transactions', [])
    manual_transactions.append({
        'ticker': ticker,
        'transaction_type': transaction_type,
        'shares': shares,
        'price': price,
        'date': date,
        'fees': fees,
        'currency': currency
    })
    session['manual_transactions'] = manual_transactions

    print(f"Aktuální obsah session: {session['manual_transactions']}")

    flash(f'Transakce {shares} akcií {ticker} byla úspěšně přidána.', 'success')
    return redirect(url_for('portfolio.select_portfolio', portfolio_id=portfolio_id))

# Funkce pro získání informací o akciích podle ISIN nebo manuálních transakcí
def get_stock_info(isin, pocet_akcii, cena):
    ticker = get_ticker_from_isin(isin)
    if not ticker:
        return {
            'Symbol': 'Neznámý',
            'Kupní hodnota': 'Neznámá',
            'Aktuální hodnota': 'Neznámá',
            'Počet akcií': 'Neznámé',
            'Profit': 'Neznámý'
        }

    current_price = get_delayed_price_polygon(ticker)

    if current_price is None:
        # Pokud nemáme aktuální cenu, vracíme alespoň kupní hodnotu a počet akcií
        return {
            'Symbol': ticker,
            'Kupní hodnota': round(cena * pocet_akcii, 2),
            'Aktuální hodnota': 'Neznámá',
            'Počet akcií': pocet_akcii,
            'Profit': 'Neznámý'
        }

    # Výpočet aktuální hodnoty a zisku
    aktualni_hodnota = current_price * pocet_akcii
    profit = aktualni_hodnota - (cena * pocet_akcii)

    return {
        'Symbol': ticker,
        'Kupní hodnota': round(cena * pocet_akcii, 2),
        'Aktuální hodnota': round(aktualni_hodnota, 2),
        'Počet akcií': pocet_akcii,
        'Profit': round(profit, 2)
    }

# Funkce pro manuální transakce
def get_stock_info_from_manual(transaction):
    ticker = transaction['ticker']
    shares = transaction['shares']
    price = transaction['price']
    current_price = get_delayed_price_polygon(ticker)

    purchase_value = shares * price
    current_value = shares * current_price if current_price else 0
    profit = current_value - purchase_value

    return {
        'Symbol': ticker,
        'Kupní hodnota': round(purchase_value, 2),
        'Aktuální hodnota': round(current_value, 2) if current_price else 'Neznámá',
        'Počet akcií': shares,
        'Profit': round(profit, 2)
    }

# Route pro výběr portfolia
@portfolio_bp.route('/select_portfolio/<int:portfolio_id>', methods=['GET'])
@login_required
def select_portfolio(portfolio_id):
    # Načtení dat z portfolia a session
    portfolio = Portfolio.query.get_or_404(portfolio_id)
    if portfolio.user != current_user:
        flash('Nemáte oprávnění k zobrazení tohoto portfolia.', 'error')
        return redirect(url_for('portfolio.upload'))

    # Načtení CSV dat z portfolia
    csv_data = BytesIO(portfolio.data)
    try:
        data = pd.read_csv(csv_data, encoding='utf-8')
    except pd.errors.EmptyDataError:
        flash('Soubor je prázdný nebo neplatný.', 'error')
        return redirect(url_for('portfolio.upload'))

    # Načítání manuálních transakcí ze session
    manual_transactions = session.get('manual_transactions', [])

    # Získání informací o akciích z CSV a manuálních transakcí
    stock_info_list = []

    # Získání informací z CSV
    for _, row in data.iterrows():
        stock_info = get_stock_info(row['ISIN'], row['Počet'], row['Cena'])
        stock_info_list.append(stock_info)

    # Přidání manuálních transakcí do stock_info_list
    for transaction in manual_transactions:
        stock_info = get_stock_info_from_manual(transaction)
        stock_info_list.append(stock_info)

    # Výpočet dalších statistik, jako hodnota portfolia, zisky apod.
    total_portfolio_value, total_invested_amount = calculate_portfolio_value(data, manual_transactions)

    # Získání dividend a dalších informací
    total_dividend_results = calculate_dividend_cash(data, total_portfolio_value)

    # Vytvoření výsledků pro šablonu
    results = {
        'portfolio_value': f"{round(total_portfolio_value, 2)} €",
        'realized_profit': f"{round(calculate_realized_profit(data), 2)} €",
        'unrealized_profit': f"{round(calculate_unrealized_profit(total_portfolio_value, total_invested_amount), 2)} €",
        'total_dividends': f"{round(total_dividend_results['total_dividends'], 2)} €",
        'total_fees': f"{round(calculate_fees(data), 2)} €",
        'invested': f"{round(total_invested_amount, 2)} €"
    }

    return render_template('process.html', results=results, stock_info_list=stock_info_list, portfolio=portfolio)

# Route pro zobrazení detailů investic
@portfolio_bp.route('/investment_details', methods=['GET'])
@login_required
def investment_details():
    # Získání investované částky a doby investování ze session nebo vypočítané hodnoty
    invested_amount = session.get('invested_amount', 1519.96)  # Příkladová hodnota
    investment_duration = session.get('investment_duration', 19)  # Příkladová hodnota

    if investment_duration > 0:
        avg_monthly_investment = invested_amount / investment_duration
    else:
        avg_monthly_investment = 0

    # Získáme portfolia a jejich data
    portfolio = Portfolio.query.filter_by(user_id=current_user.id).first()
    csv_data = BytesIO(portfolio.data)
    data = pd.read_csv(csv_data, encoding='utf-8')

    # Použijeme funkci pro výpočet historie investic
    investment_history, yearly_totals = calculate_investment_history(data)

    return render_template('investment_details.html', 
                           invested_amount=round(invested_amount, 2),
                           investment_duration=investment_duration,
                           avg_monthly_investment=round(avg_monthly_investment, 2),
                           investment_history=investment_history,
                           yearly_totals=yearly_totals)

# Route pro smazání portfolia
@portfolio_bp.route('/delete_portfolio/<int:portfolio_id>', methods=['POST'])
@login_required
def delete_portfolio(portfolio_id):
    portfolio_to_delete = Portfolio.query.get_or_404(portfolio_id)

    if portfolio_to_delete.user != current_user:
        flash('Nemáte oprávnění smazat toto portfolio.', 'error')
        return redirect(url_for('portfolio.upload'))

    db.session.delete(portfolio_to_delete)
    db.session.commit()
    flash('Portfolio bylo úspěšně smazáno.', 'success')
    return redirect(url_for('portfolio.upload'))
