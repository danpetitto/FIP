from flask import Blueprint, render_template, request, redirect, url_for, flash, session
from flask_login import login_required, current_user
from models import Portfolio, db
from finance import (
    add_current_prices, calculate_portfolio_value, calculate_realized_profit,
    calculate_unrealized_profit, calculate_invested_amount, calculate_dividend_cash,
    calculate_fees
)
from portfolio_analysis import (
    get_ticker_from_isin, get_delayed_price_polygon, get_sector_from_ticker
)
import pandas as pd
from io import BytesIO
from dateutil import parser
from investment_history import calculate_investment_history  # Importuje funkce z investment_history.py
from datetime import datetime, timedelta

portfolio_bp = Blueprint('portfolio', __name__)

# Funkce pro výpočet výsledků portfolia
def calculate_portfolio_results(data):
    tickers_prices = {
        'ticker': {},
        'current_price': {},
        'sector': {}
    }

    stock_info_list = []

    # Zjistíme, zda je sloupec 'ISIN' v datech a případně převádíme na tickery
    if 'ISIN' in data.columns:
        data['Ticker'] = data['ISIN'].apply(get_ticker_from_isin)

    unique_tickers = data['Ticker'].unique()
    for ticker in unique_tickers:
        current_price = get_delayed_price_polygon(ticker)
        sector = get_sector_from_ticker(ticker)

        tickers_prices['ticker'][ticker] = ticker
        tickers_prices['current_price'][ticker] = current_price
        tickers_prices['sector'][ticker] = sector

        total_shares = data.loc[data['Ticker'] == ticker, 'Počet'].sum()
        purchase_price = data.loc[data['Ticker'] == ticker, 'Cena'].mean()
        purchase_value = total_shares * purchase_price
        current_value = total_shares * current_price if current_price else 0
        profit = current_value - purchase_value

        if ticker and current_value > 0:
            stock_info_list.append({
                'ticker': ticker,
                'kupni_hodnota': round(purchase_value, 2),
                'aktualni_hodnota': round(current_value, 2),
                'profit': round(profit, 2)
            })

    portfolio_value = calculate_portfolio_value(data)
    invested_amount = calculate_invested_amount(data)
    investment_duration = calculate_investment_duration(data)

    if investment_duration > 0:
        avg_monthly_investment = invested_amount / investment_duration
    else:
        avg_monthly_investment = 0

    total_invested_positions = sum([info['kupni_hodnota'] for info in stock_info_list])
    if total_invested_positions > 0:
        position_percentages = [(info['kupni_hodnota'] / total_invested_positions) * 100 for info in stock_info_list]
        position_labels = [info['ticker'] for info in stock_info_list]
    else:
        position_percentages = []
        position_labels = []

    return tickers_prices, portfolio_value, invested_amount, investment_duration, avg_monthly_investment, stock_info_list, position_percentages, position_labels

def calculate_investment_duration(data):
    data['Datum'] = pd.to_datetime(data['Datum'], dayfirst=True, errors='coerce')

    if data['Datum'].isnull().any():
        raise ValueError("Některá data ve sloupci 'Datum' nejsou validní.")

    oldest_date = data['Datum'].min()
    current_date = datetime.now()

    duration_in_months = (current_date.year - oldest_date.year) * 12 + current_date.month - oldest_date.month
    if current_date.day >= oldest_date.day:
        duration_in_months += 1

    return duration_in_months

@portfolio_bp.route('/add_transaction/<int:portfolio_id>', methods=['POST'])
@login_required
def add_transaction(portfolio_id):
    ticker = request.form.get('ticker')
    price = float(request.form.get('price'))
    count = int(request.form.get('count'))
    date = request.form.get('date')
    fees = float(request.form.get('fees'))
    currency = request.form.get('currency')
    date = pd.to_datetime(date, format='%Y-%m-%d', errors='coerce')

    # Načteme data portfolia ze session
    csv_data = session.get('portfolio_data')
    if csv_data:
        csv_data = pd.DataFrame(csv_data)
    else:
        csv_data = pd.DataFrame(columns=['Ticker', 'Cena', 'Počet', 'Datum', 'Poplatky', 'Měna'])

    # Přidáme novou transakci
    new_transaction = pd.DataFrame({
        'Ticker': [ticker],
        'Cena': [price],
        'Počet': [count],
        'Datum': [date],
        'Poplatky': [fees],
        'Měna': [currency]
    })

    # Spojíme nová data s existujícím portfoliem
    csv_data = pd.concat([csv_data, new_transaction], ignore_index=True)
    session['portfolio_data'] = csv_data.to_dict(orient='list')

    flash('Transakce byla úspěšně přidána.', 'success')
    return redirect(url_for('portfolio.select_portfolio', portfolio_id=portfolio_id))

# Route pro nahrávání nového portfolia
@portfolio_bp.route('/upload', methods=['GET', 'POST'])
@login_required
def upload():
    if request.method == 'POST':
        file = request.files.get('file')
        portfolio_name = request.form.get('portfolio_name')

        if not file or not portfolio_name:
            flash('Musíte nahrát soubor a zadat název portfolia.', 'error')
            return redirect(url_for('portfolio.upload'))

        if not file.filename.endswith('.csv'):
            flash('Prosím, nahrajte soubor ve formátu CSV.', 'error')
            return redirect(url_for('portfolio.upload'))

        new_portfolio = Portfolio(
            name=portfolio_name,
            filename=file.filename,
            data=file.read(),
            user=current_user
        )
        db.session.add(new_portfolio)
        db.session.commit()

        flash('Portfolio bylo úspěšně nahráno.', 'success')
        return redirect(url_for('portfolio.upload'))

    user_portfolios = Portfolio.query.filter_by(user_id=current_user.id).all()
    return render_template('upload.html', portfolios=user_portfolios)

def get_isin_from_ticker(ticker):
    # Příklad: můžeš sem použít nějakou API nebo databázi pro převod tickeru na ISIN
    # Tento příklad je jen ilustrace - nahraď skutečnou logikou
    isin_mapping = {
        'AAPL': 'US0378331005',
        'TSLA': 'US88160R1014',
        'GOOGL': 'US02079K3059'
    }
    return isin_mapping.get(ticker)

@portfolio_bp.route('/select_portfolio/<int:portfolio_id>', methods=['GET'])
@login_required
def select_portfolio(portfolio_id):
    portfolio = Portfolio.query.get_or_404(portfolio_id)

    if portfolio.user != current_user:
        flash('Nemáte oprávnění k zobrazení tohoto portfolia.', 'error')
        return redirect(url_for('portfolio.upload'))

    # Načtení dat portfolia ze session
    csv_data = session.get('portfolio_data')
    if not csv_data:
        flash('Portfolio je prázdné.', 'error')
        return redirect(url_for('portfolio.upload'))

    data = pd.DataFrame(csv_data)

    # Pokud chybí ISIN, přidáme ho na základě Tickeru (pro manuální transakce)
    if 'ISIN' not in data.columns:
        data['ISIN'] = data['Ticker'].apply(get_isin_from_ticker)
        print("Chybí sloupec ISIN, přepínáme na Ticker")

    # Výpočet hodnoty portfolia
    try:
        portfolio_value = calculate_portfolio_value(data)
    except KeyError as e:
        print(f"Chyba při výpočtu hodnoty portfolia: {e}")
        flash(f"Chyba při výpočtu hodnoty portfolia: {e}", 'error')
        return redirect(url_for('portfolio.upload'))

    # Výpočet dalších důležitých informací
    try:
        invested_amount = calculate_invested_amount(data)
        investment_duration = calculate_investment_duration(data)
        realized_profit = calculate_realized_profit(data)
        unrealized_profit = calculate_unrealized_profit(portfolio_value, invested_amount)
        total_dividends = calculate_dividend_cash(data)['total_dividends']
        total_fees = calculate_fees(data)
    except KeyError as e:
        print(f"Chyba při výpočtu dalších klíčových hodnot: {e}")
        flash(f"Chyba při výpočtu dalších klíčových hodnot: {e}", 'error')
        return redirect(url_for('portfolio.upload'))

    # Předání výsledků do šablony
    results = {
        'portfolio_value': f"{round(portfolio_value, 2)} €",
        'realized_profit': f"{round(realized_profit, 2)} €",
        'unrealized_profit': f"{round(unrealized_profit, 2)} €",
        'total_dividends': f"{round(total_dividends, 2)} €",
        'total_fees': f"{round(total_fees, 2)} €",
        'invested': f"{round(invested_amount, 2)} €"
    }

    # Získání tickerů a cen pro graf
    position_summary = data.groupby('Ticker')['Počet'].sum().reset_index()
    open_positions = position_summary[position_summary['Počet'] > 0]
    position_labels = open_positions['Ticker'].tolist()  # Seznam tickerů
    position_percentages = [round((count / open_positions['Počet'].sum()) * 100, 2) for count in open_positions['Počet']]

    # Vykreslení šablony
    return render_template('process.html',
                           results=results,
                           stock_labels=position_labels,
                           stock_percentages=position_percentages,
                           portfolio=portfolio)

# Route pro zobrazení detailů investic
@portfolio_bp.route('/investment_details', methods=['GET'])
@login_required
def investment_details():
    # Získání investované částky a doby investování ze session nebo vypočítané hodnoty
    invested_amount = session.get('invested_amount', 1519.96)  # Příkladová hodnota
    investment_duration = session.get('investment_duration', 19)  # Příkladová hodnota

    if investment_duration > 0:
        avg_monthly_investment = invested_amount / investment_duration
    else:
        avg_monthly_investment = 0

    # Získáme portfolia a jejich data
    portfolio = Portfolio.query.filter_by(user_id=current_user.id).first()
    csv_data = BytesIO(portfolio.data)
    data = pd.read_csv(csv_data, encoding='utf-8')

    # Použijeme funkci pro výpočet historie investic
    investment_history, yearly_totals = calculate_investment_history(data)

    return render_template('investment_details.html', 
                           invested_amount=round(invested_amount, 2),
                           investment_duration=investment_duration,
                           avg_monthly_investment=round(avg_monthly_investment, 2),
                           investment_history=investment_history,
                           yearly_totals=yearly_totals)

# Route pro smazání portfolia
@portfolio_bp.route('/delete_portfolio/<int:portfolio_id>', methods=['POST'])
@login_required
def delete_portfolio(portfolio_id):
    portfolio_to_delete = Portfolio.query.get_or_404(portfolio_id)

    if portfolio_to_delete.owner != current_user:
        flash('Nemáte oprávnění smazat toto portfolio.', 'error')
        return redirect(url_for('portfolio.upload'))

    db.session.delete(portfolio_to_delete)
    db.session.commit()
    flash('Portfolio bylo úspěšně smazáno.', 'success')
    return redirect(url_for('portfolio.upload'))
